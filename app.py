import gradio as gr
import json
import pandas as pd
from typing import Dict, List, Any, Tuple

class ArmorPicker:
    def __init__(self):
        self.resistance_types = ["blunt", "pierce", "lacer", "fire", "cold", "poison", "shock", "beam"]
        self.current_language = "English"
        self.armor_data = {}

        # Language configuration
        self.languages = {
            "English": {"code": "english", "file": "armor_data_english.json"},
            "–†—É—Å—Å–∫–∏–π": {"code": "russian", "file": "armor_data_russian.json"},
            "Deutsch": {"code": "german", "file": "armor_data_german.json"},
            "Fran√ßais": {"code": "french", "file": "armor_data_fren—Åh.json"},
            "Espa√±ol": {"code": "spanish", "file": "armor_data_spanish.json"},
            "Polski": {"code": "polish", "file": "armor_data_polish.json"},
            "T√ºrk√ße": {"code": "turkish", "file": "armor_data_turkish.json"},
            "Portugu√™s Brasileiro": {"code": "brazilian", "file": "armor_data_brazilianportugal.json"},
            "ÌïúÍµ≠Ïñ¥": {"code": "korean", "file": "armor_data_korean.json"},
            "Êó•Êú¨": {"code": "japanese", "file": "armor_data_japanese.json"},
            "‰∏≠ÂõΩ‰∫∫": {"code": "chinese", "file": "armor_data_chinesesimp.json"}
        }
        
        # UI translations
        self.translations = {
            "English": {
                "title": "QM Armor Picker",
                "subtitle": "Select resistance requirements and search for armors. Results show up to 4 items from each armor class.",
                "color_legend": "**Color Legend**: Resistance values are colored from üî¥ Red (low) to üü¢ Green (high)",
                "language": "Language",
                "resistance_filters": "Resistance Filters",
                "enable": "Enable",
                "min_value": "Min {} Value",
                "search_button": "Search Armors",
                "results": "Results",
                "click_search": "Click 'Search Armors' to see results...",
                "no_armors": "No armors found matching the criteria.",
                "name": "Name",
                "class": "Class",
                "description": "Description",
                "durability": "Durability",
                "weight": "Weight",
                "blunt": "Blunt",
                "pierce": "Pierce",
                "lacer": "Cut",
                "fire": "Fire",
                "cold": "Cold",
                "poison": "Poison",
                "shock": "Shock",
                "beam": "Beam"
            },
            "–†—É—Å—Å–∫–∏–π": {
                "title": "QM –ü–æ–¥–±–æ—Ä—â–∏–∫ –ë—Ä–æ–Ω–∏",
                "subtitle": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é –∏ –Ω–∞–π–¥–∏—Ç–µ –±—Ä–æ–Ω—é. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–æ 4 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±—Ä–æ–Ω–∏.",
                "color_legend": "**–õ–µ–≥–µ–Ω–¥–∞ —Ü–≤–µ—Ç–æ–≤**: –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –æ–∫—Ä–∞—à–µ–Ω—ã –æ—Ç üî¥ –ö—Ä–∞—Å–Ω–æ–≥–æ (–Ω–∏–∑–∫–æ–µ) –¥–æ üü¢ –ó–µ–ª–µ–Ω–æ–≥–æ (–≤—ã—Å–æ–∫–æ–µ)",
                "language": "–Ø–∑—ã–∫",
                "resistance_filters": "–§–∏–ª—å—Ç—Ä—ã –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è",
                "enable": "–í–∫–ª—é—á–∏—Ç—å",
                "min_value": "–ú–∏–Ω. {} –ó–Ω–∞—á–µ–Ω–∏–µ",
                "search_button": "–ü–æ–∏—Å–∫ –ë—Ä–æ–Ω–∏",
                "results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                "click_search": "–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫ –ë—Ä–æ–Ω–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
                "no_armors": "–ë—Ä–æ–Ω—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "class": "–ö–ª–∞—Å—Å",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "durability": "–ü—Ä–æ—á–Ω–æ—Å—Ç—å",
                "weight": "–í–µ—Å",
                "blunt": "–î—Ä–æ–±—è—â–∏–π",
                "pierce": "–ö–æ–ª—é—â–∏–π",
                "lacer": "–†–µ–∂—É—â–∏–π",
                "fire": "–û–≥–æ–Ω—å",
                "cold": "–•–æ–ª–æ–¥",
                "poison": "–Ø–¥",
                "shock": "–®–æ–∫",
                "beam": "–õ—É—á"
            },
            "Deutsch": {
                "title": "QM R√ºstungs-Picker",
                "subtitle": "W√§hlen Sie Widerstandsanforderungen und suchen Sie nach R√ºstungen. Ergebnisse zeigen bis zu 4 Gegenst√§nde aus jeder R√ºstungsklasse.",
                "color_legend": "**Farblegende**: Widerstandswerte sind von üî¥ Rot (niedrig) bis üü¢ Gr√ºn (hoch) gef√§rbt",
                "language": "Sprache",
                "resistance_filters": "Widerstandsfilter",
                "enable": "Aktivieren",
                "min_value": "Min. {} Wert",
                "search_button": "R√ºstung Suchen",
                "results": "Ergebnisse",
                "click_search": "Klicken Sie auf 'R√ºstung Suchen' um Ergebnisse zu sehen...",
                "no_armors": "Keine R√ºstung gefunden, die den Kriterien entspricht.",
                "name": "Name",
                "class": "Klasse",
                "description": "Beschreibung",
                "durability": "Haltbarkeit",
                "weight": "Gewicht",
                "blunt": "Stumpf",
                "pierce": "Durchdringend",
                "lacer": "Schneidend",
                "fire": "Feuer",
                "cold": "K√§lte",
                "poison": "Gift",
                "shock": "Schock",
                "beam": "Strahl"
            },
            "Fran√ßais": {
                "title": "QM S√©lecteur d'Armure",
                "subtitle": "S√©lectionnez les exigences de r√©sistance et recherchez des armures. Les r√©sultats montrent jusqu'√† 4 objets de chaque classe d'armure.",
                "color_legend": "**L√©gende des couleurs**: Les valeurs de r√©sistance sont color√©es du üî¥ Rouge (faible) au üü¢ Vert (√©lev√©)",
                "language": "Langue",
                "resistance_filters": "Filtres de R√©sistance",
                "enable": "Activer",
                "min_value": "Valeur {} Min.",
                "search_button": "Rechercher Armures",
                "results": "R√©sultats",
                "click_search": "Cliquez sur 'Rechercher Armures' pour voir les r√©sultats...",
                "no_armors": "Aucune armure trouv√©e correspondant aux crit√®res.",
                "name": "Nom",
                "class": "Classe",
                "description": "Description",
                "durability": "Durabilit√©",
                "weight": "Poids",
                "blunt": "Contondant",
                "pierce": "Perforant",
                "lacer": "Tranchant",
                "fire": "Feu",
                "cold": "Froid",
                "poison": "Poison",
                "shock": "Choc",
                "beam": "Rayon"
            },
            "Espa√±ol": {
                "title": "QM Selector de Armadura",
                "subtitle": "Seleccione los requisitos de resistencia y busque armaduras. Los resultados muestran hasta 4 elementos de cada clase de armadura.",
                "color_legend": "**Leyenda de colores**: Los valores de resistencia est√°n coloreados desde üî¥ Rojo (bajo) hasta üü¢ Verde (alto)",
                "language": "Idioma",
                "resistance_filters": "Filtros de Resistencia",
                "enable": "Habilitar",
                "min_value": "Valor {} M√≠n.",
                "search_button": "Buscar Armaduras",
                "results": "Resultados",
                "click_search": "Haga clic en 'Buscar Armaduras' para ver los resultados...",
                "no_armors": "No se encontraron armaduras que coincidan con los criterios.",
                "name": "Nombre",
                "class": "Clase",
                "description": "Descripci√≥n",
                "durability": "Durabilidad",
                "weight": "Peso",
                "blunt": "Contundente",
                "pierce": "Perforante",
                "lacer": "Cortante",
                "fire": "Fuego",
                "cold": "Fr√≠o",
                "poison": "Veneno",
                "shock": "Choque",
                "beam": "Rayo"
            },
            "Polski": {
                "title": "QM Wybieracz Zbroi",
                "subtitle": "Wybierz wymagania odporno≈õci i wyszukaj zbroje. Wyniki pokazujƒÖ do 4 przedmiot√≥w z ka≈ºdej klasy zbroi.",
                "color_legend": "**Legenda kolor√≥w**: Warto≈õci odporno≈õci sƒÖ kolorowane od üî¥ Czerwonego (niskie) do üü¢ Zielonego (wysokie)",
                "language": "Jƒôzyk",
                "resistance_filters": "Filtry Odporno≈õci",
                "enable": "W≈ÇƒÖcz",
                "min_value": "Min. Warto≈õƒá {}",
                "search_button": "Szukaj Zbroi",
                "results": "Wyniki",
                "click_search": "Kliknij 'Szukaj Zbroi' aby zobaczyƒá wyniki...",
                "no_armors": "Nie znaleziono zbroi spe≈ÇniajƒÖcych kryteria.",
                "name": "Nazwa",
                "class": "Klasa",
                "description": "Opis",
                "durability": "Wytrzyma≈Ço≈õƒá",
                "weight": "Waga",
                "blunt": "Obuchowe",
                "pierce": "K≈Çute",
                "lacer": "Ciƒôte",
                "fire": "Ogie≈Ñ",
                "cold": "Zimno",
                "poison": "Trucizna",
                "shock": "Szok",
                "beam": "Promie≈Ñ"
            },
            "T√ºrk√ße": {
                "title": "QM Zƒ±rh Se√ßici",
                "subtitle": "Diren√ß gereksinimlerini se√ßin ve zƒ±rhlarƒ± arayƒ±n. Sonu√ßlar her zƒ±rh sƒ±nƒ±fƒ±ndan en fazla 4 √∂ƒüe g√∂sterir.",
                "color_legend": "**Renk A√ßƒ±klamasƒ±**: Diren√ß deƒüerleri üî¥ Kƒ±rmƒ±zƒ± (d√º≈ü√ºk) ile üü¢ Ye≈üil (y√ºksek) arasƒ±nda renklendirilmi≈ütir",
                "language": "Dil",
                "resistance_filters": "Diren√ß Filtreleri",
                "enable": "Etkinle≈ütir",
                "min_value": "Min {} Deƒüeri",
                "search_button": "Zƒ±rh Ara",
                "results": "Sonu√ßlar",
                "click_search": "Sonu√ßlarƒ± g√∂rmek i√ßin 'Zƒ±rh Ara'ya tƒ±klayƒ±n...",
                "no_armors": "Kriterlere uyan zƒ±rh bulunamadƒ±.",
                "name": "ƒ∞sim",
                "class": "Sƒ±nƒ±f",
                "description": "A√ßƒ±klama",
                "durability": "Dayanƒ±klƒ±lƒ±k",
                "weight": "Aƒüƒ±rlƒ±k",
                "blunt": "K√ºnt",
                "pierce": "Delici",
                "lacer": "Kesici",
                "fire": "Ate≈ü",
                "cold": "Soƒüuk",
                "poison": "Zehir",
                "shock": "≈ûok",
                "beam": "I≈üƒ±n"
            },
            "Portugu√™s Brasileiro": {
                "title": "QM Seletor de Armadura",
                "subtitle": "Selecione os requisitos de resist√™ncia e procure armaduras. Os resultados mostram at√© 4 itens de cada classe de armadura.",
                "color_legend": "**Legenda de cores**: Os valores de resist√™ncia s√£o coloridos de üî¥ Vermelho (baixo) a üü¢ Verde (alto)",
                "language": "Idioma",
                "resistance_filters": "Filtros de Resist√™ncia",
                "enable": "Ativar",
                "min_value": "Valor {} M√≠n.",
                "search_button": "Buscar Armaduras",
                "results": "Resultados",
                "click_search": "Clique em 'Buscar Armaduras' para ver os resultados...",
                "no_armors": "Nenhuma armadura encontrada que corresponda aos crit√©rios.",
                "name": "Nome",
                "class": "Classe",
                "description": "Descri√ß√£o",
                "durability": "Durabilidade",
                "weight": "Peso",
                "blunt": "Contundente",
                "pierce": "Perfurante",
                "lacer": "Cortante",
                "fire": "Fogo",
                "cold": "Frio",
                "poison": "Veneno",
                "shock": "Choque",
                "beam": "Raio"
            },
            "ÌïúÍµ≠Ïñ¥": {
                "title": "QM Í∞ëÏò∑ ÏÑ†ÌÉùÍ∏∞",
                "subtitle": "Ï†ÄÌï≠ ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÏÑ†ÌÉùÌïòÍ≥† Í∞ëÏò∑ÏùÑ Í≤ÄÏÉâÌïòÏÑ∏Ïöî. Í≤∞Í≥ºÎäî Í∞Å Í∞ëÏò∑ ÌÅ¥ÎûòÏä§ÏóêÏÑú ÏµúÎåÄ 4Í∞ú ÏïÑÏù¥ÌÖúÏùÑ Î≥¥Ïó¨Ï§çÎãàÎã§.",
                "color_legend": "**ÏÉâÏÉÅ Î≤îÎ°Ä**: Ï†ÄÌï≠ Í∞íÏùÄ üî¥ Îπ®Í∞ÑÏÉâ(ÎÇÆÏùå)ÏóêÏÑú üü¢ ÎÖπÏÉâ(ÎÜíÏùå)ÏúºÎ°ú ÏÉâÏπ†Îê©ÎãàÎã§",
                "language": "Ïñ∏Ïñ¥",
                "resistance_filters": "Ï†ÄÌï≠ ÌïÑÌÑ∞",
                "enable": "ÌôúÏÑ±Ìôî",
                "min_value": "ÏµúÏÜå {} Í∞í",
                "search_button": "Í∞ëÏò∑ Í≤ÄÏÉâ",
                "results": "Í≤∞Í≥º",
                "click_search": "Í≤∞Í≥ºÎ•º Î≥¥Î†§Î©¥ 'Í∞ëÏò∑ Í≤ÄÏÉâ'ÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî...",
                "no_armors": "Í∏∞Ï§ÄÏóê ÎßûÎäî Í∞ëÏò∑ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.",
                "name": "Ïù¥Î¶Ñ",
                "class": "ÌÅ¥ÎûòÏä§",
                "description": "ÏÑ§Î™Ö",
                "durability": "ÎÇ¥Íµ¨ÎèÑ",
                "weight": "Î¨¥Í≤å",
                "blunt": "ÎëîÍ∏∞",
                "pierce": "Í¥ÄÌÜµ",
                "lacer": "Ï†àÎã®",
                "fire": "ÌôîÏóº",
                "cold": "ÎÉâÍ∏∞",
                "poison": "ÎèÖ",
                "shock": "Ï∂©Í≤©",
                "beam": "Í¥ëÏÑ†"
            },
            "Êó•Êú¨": {
                "title": "QM „Ç¢„Éº„Éû„Éº„Éî„ÉÉ„Ç´„Éº",
                "subtitle": "ÊäµÊäóË¶Å‰ª∂„ÇíÈÅ∏Êäû„Åó„Å¶Èò≤ÂÖ∑„ÇíÊ§úÁ¥¢„Åó„Åæ„Åô„ÄÇÁµêÊûú„ÅØÂêÑÈò≤ÂÖ∑„ÇØ„É©„Çπ„Åã„ÇâÊúÄÂ§ß4„Å§„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíË°®Á§∫„Åó„Åæ„Åô„ÄÇ",
                "color_legend": "**Ëâ≤„ÅÆÂá°‰æã**: ÊäµÊäóÂÄ§„ÅØüî¥Ëµ§Ôºà‰ΩéÔºâ„Åã„Çâüü¢Á∑ëÔºàÈ´òÔºâ„Åæ„ÅßËâ≤ÂàÜ„Åë„Åï„Çå„Å¶„ÅÑ„Åæ„Åô",
                "language": "Ë®ÄË™û",
                "resistance_filters": "ÊäµÊäó„Éï„Ç£„É´„Çø„Éº",
                "enable": "ÊúâÂäπÂåñ",
                "min_value": "ÊúÄÂ∞è{}ÂÄ§",
                "search_button": "Èò≤ÂÖ∑„ÇíÊ§úÁ¥¢",
                "results": "ÁµêÊûú",
                "click_search": "ÁµêÊûú„ÇíË°®Á§∫„Åô„Çã„Å´„ÅØ„ÄåÈò≤ÂÖ∑„ÇíÊ§úÁ¥¢„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ...",
                "no_armors": "Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„ÇãÈò≤ÂÖ∑„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ",
                "name": "ÂêçÂâç",
                "class": "„ÇØ„É©„Çπ",
                "description": "Ë™¨Êòé",
                "durability": "ËÄê‰πÖÊÄß",
                "weight": "ÈáçÈáè",
                "blunt": "ÊâìÊíÉ",
                "pierce": "Ë≤´ÈÄö",
                "lacer": "ÂàáÊñ≠",
                "fire": "ÁÅ´",
                "cold": "ÂÜ∑Ê∞ó",
                "poison": "ÊØí",
                "shock": "Ë°ùÊíÉ",
                "beam": "ÂÖâÁ∑ö"
            },
            "‰∏≠ÂõΩ‰∫∫": {
                "title": "QM Êä§Áî≤ÈÄâÊã©Âô®",
                "subtitle": "ÈÄâÊã©ÊäóÊÄßË¶ÅÊ±ÇÂπ∂ÊêúÁ¥¢Êä§Áî≤„ÄÇÁªìÊûúÊòæÁ§∫ÊØè‰∏™Êä§Áî≤Á±ªÂà´ÊúÄÂ§ö4‰∏™Áâ©ÂìÅ„ÄÇ",
                "color_legend": "**È¢úËâ≤Âõæ‰æã**: ÊäóÊÄßÂÄº‰ªéüî¥Á∫¢Ëâ≤Ôºà‰ΩéÔºâÂà∞üü¢ÁªøËâ≤ÔºàÈ´òÔºâÁùÄËâ≤",
                "language": "ËØ≠Ë®Ä",
                "resistance_filters": "ÊäóÊÄßËøáÊª§Âô®",
                "enable": "ÂêØÁî®",
                "min_value": "ÊúÄÂ∞è{}ÂÄº",
                "search_button": "ÊêúÁ¥¢Êä§Áî≤",
                "results": "ÁªìÊûú",
                "click_search": 'ÁÇπÂáª"ÊêúÁ¥¢Êä§Áî≤"Êü•ÁúãÁªìÊûú...',
                "no_armors": "Êú™ÊâæÂà∞Á¨¶ÂêàÊù°‰ª∂ÁöÑÊä§Áî≤„ÄÇ",
                "name": "ÂêçÁß∞",
                "class": "Á±ªÂà´",
                "description": "ÊèèËø∞",
                "durability": "ËÄê‰πÖÂ∫¶",
                "weight": "ÈáçÈáè",
                "blunt": "ÈíùÂáª",
                "pierce": "Á©øÂà∫",
                "lacer": "ÂàáÂâ≤",
                "fire": "ÁÅ´ÁÑ∞",
                "cold": "ÂØíÂÜ∑",
                "poison": "ÊØíÁ¥†",
                "shock": "ÂÜ≤Âáª",
                "beam": "ÂÖâÊùü"
            }
        }
        
        # Load default language data
        self.load_armor_data("English")
    
    def load_armor_data(self, language: str) -> Dict:
        """Load armor data from JSON file for specified language"""
        if language not in self.languages:
            language = "English"
        
        file_path = self.languages[language]["file"]
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                self.armor_data = json.load(f)
                self.current_language = language
                return self.armor_data
        except FileNotFoundError:
            # Fallback to English if file not found
            if language != "English":
                return self.load_armor_data("English")
            else:
                self.armor_data = {"armors": {"data": []}}
                return self.armor_data
    
    def get_translation(self, key: str) -> str:
        """Get translation for current language"""
        return self.translations.get(self.current_language, self.translations["English"]).get(key, key)
    
    def get_armor_classes(self) -> List[str]:
        """Get unique armor classes from the data"""
        armor_classes = set()
        for armor in self.armor_data.get("armors", {}).get("data", []):
            armor_classes.add(armor.get("ArmorClass", "Unknown"))
        return sorted(list(armor_classes))
    
    def filter_armors(self, resistance_filters: Dict[str, Dict]) -> List[Dict]:
        """Filter armors based on resistance requirements"""
        filtered_armors = []
        
        for armor in self.armor_data.get("armors", {}).get("data", []):
            meets_requirements = True
            
            # Check each resistance requirement
            for resist_type, filter_config in resistance_filters.items():
                if not filter_config["enabled"]:
                    continue
                    
                required_value = filter_config["value"]
                armor_resist_value = 0
                
                # Find the resistance value in armor's ResistSheet
                for resist in armor.get("ResistSheet", []):
                    if resist.get("ResistType") == resist_type:
                        armor_resist_value = resist.get("ResistValue", 0)
                        break
                
                # Check if armor meets minimum requirement
                if armor_resist_value < required_value:
                    meets_requirements = False
                    break
            
            if meets_requirements:
                filtered_armors.append(armor)
        
        return filtered_armors
    
    def get_top_armors_per_class(self, filtered_armors: List[Dict], max_per_class: int = 4) -> List[Dict]:
        """Get top armors from each armor class"""
        armor_classes = {}
        
        # Group by armor class
        for armor in filtered_armors:
            armor_class = armor.get("ArmorClass", "Unknown")
            if armor_class not in armor_classes:
                armor_classes[armor_class] = []
            armor_classes[armor_class].append(armor)
        
        # Get top items from each class (sorted by total resistance)
        result = []
        for armor_class, armors in armor_classes.items():
            # Sort by total resistance value (descending)
            sorted_armors = sorted(armors, key=lambda x: sum(
                resist.get("ResistValue", 0) for resist in x.get("ResistSheet", [])
            ), reverse=True)
            
            # Take top N items from this class
            result.extend(sorted_armors[:max_per_class])
        
        return result
    
    def get_resistance_range(self, armors: List[Dict]) -> Dict[str, Tuple[int, int]]:
        """Get min/max values for each resistance type to calculate gradients"""
        ranges = {}
        
        for resist_type in self.resistance_types:
            values = []
            for armor in armors:
                for resist in armor.get("ResistSheet", []):
                    if resist.get("ResistType") == resist_type:
                        values.append(resist.get("ResistValue", 0))
                        break
                else:
                    values.append(0)
            
            if values:
                ranges[resist_type] = (min(values), max(values))
            else:
                ranges[resist_type] = (0, 0)
        
        return ranges
    
    def value_to_color(self, value: int, min_val: int, max_val: int) -> str:
        """Convert resistance value to color gradient (red to green)"""
        if max_val == min_val:
            return "#FFFF99"  # Yellow for single value
        
        # Normalize value between 0 and 1
        normalized = (value - min_val) / (max_val - min_val)
        
        # Create gradient from red (0) to green (1)
        red = int(255 * (1 - normalized))
        green = int(255 * normalized)
        blue = 0
        
        return f"#{red:02x}{green:02x}{blue:02x}"
    
    def create_styled_table_html(self, armors: List[Dict]) -> str:
        """Create HTML table with color gradients"""
        if not armors:
            return f"<p>{self.get_translation('no_armors')}</p>"
        
        # Get resistance ranges for color calculation
        resist_ranges = self.get_resistance_range(armors)
        
        # Start HTML table
        html = """
        <style>
        .armor-table {
            border-collapse: collapse;
            width: 100%;
            font-family: Arial, sans-serif;
            font-size: 12px;
        }
        .armor-table th, .armor-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        .armor-table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        .armor-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .resist-cell {
            font-weight: bold;
            color: white;
            text-shadow: 1px 1px 1px rgba(0,0,0,0.5);
        }
        </style>
        <table class="armor-table">
        <thead>
        <tr>
        """
        
        # Add headers with translations
        html += f"<th>{self.get_translation('name')}</th>"
        html += f"<th>{self.get_translation('class')}</th>"
        html += f"<th>{self.get_translation('description')}</th>"
        html += f"<th>{self.get_translation('durability')}</th>"
        html += f"<th>{self.get_translation('weight')}</th>"
        
        # Add resistance headers
        for resist_type in self.resistance_types:
            html += f"<th>{self.get_translation(resist_type)}</th>"
        
        html += "</tr></thead><tbody>"
        
        # Add armor rows
        for armor in armors:
            html += "<tr>"
            html += f"<td><strong>{armor.get('Name', 'Unknown')}</strong></td>"
            html += f"<td>{armor.get('ArmorClass', 'Unknown')}</td>"
            html += f"<td>{armor.get('Description', 'N/A')}</td>"
            html += f"<td>{armor.get('MaxDurability', 'N/A')}</td>"
            html += f"<td>{armor.get('Weight', 'N/A')}</td>"
            
            # Add resistance values with colors
            resist_dict = {}
            for resist in armor.get("ResistSheet", []):
                resist_dict[resist.get("ResistType")] = resist.get("ResistValue", 0)
            
            for resist_type in self.resistance_types:
                value = resist_dict.get(resist_type, 0)
                min_val, max_val = resist_ranges[resist_type]
                color = self.value_to_color(value, min_val, max_val)
                html += f'<td class="resist-cell" style="background-color: {color}">{value}</td>'
            
            html += "</tr>"
        
        html += "</tbody></table>"
        
        return html

def create_armor_picker_interface():
    picker = ArmorPicker()
    
    def change_language(language):
        """Handle language change"""
        picker.load_armor_data(language)
        return f"<p>{picker.get_translation('click_search')}</p>"
    
    def search_armors(language, *args):
        """Search armors with current language"""
        # Ensure data is loaded for current language
        picker.load_armor_data(language)
        
        # Parse resistance filter arguments
        resistance_filters = {}
        
        for i, resist_type in enumerate(picker.resistance_types):
            enabled = args[i * 2]  # Toggle
            value = args[i * 2 + 1]  # Value
            resistance_filters[resist_type] = {
                "enabled": enabled,
                "value": value
            }
        
        # Filter armors
        filtered_armors = picker.filter_armors(resistance_filters)
        
        # Get top 4 from each armor class
        top_armors = picker.get_top_armors_per_class(filtered_armors, max_per_class=4)
        
        # Create styled HTML table
        html_table = picker.create_styled_table_html(top_armors)
        
        return html_table
    
    # Create interface components
    with gr.Blocks(title="QM Armor Picker", theme=gr.themes.Soft()) as interface:
        # Language selector
        language_selector = gr.Dropdown(
            choices=list(picker.languages.keys()),
            value="English",
            label="Language / –Ø–∑—ã–∫ / Sprache / Langue / Idioma / Jƒôzyk / Dil / Idioma / Ïñ∏Ïñ¥ / Ë®ÄË™û / ËØ≠Ë®Ä"
        )
        
        # Dynamic content that updates with language
        title_md = gr.Markdown("# QM Armor Picker")
        subtitle_md = gr.Markdown("Select resistance requirements and search for armors. Results show up to 4 items from each armor class.")
        legend_md = gr.Markdown("**Color Legend**: Resistance values are colored from üî¥ Red (low) to üü¢ Green (high)")
        
        with gr.Row():
            with gr.Column(scale=1):
                filters_md = gr.Markdown("## Resistance Filters")
                
                # Create toggle and value inputs for each resistance type
                inputs = [language_selector]  # Include language selector in inputs
                resistance_inputs = []
                
                for resist_type in picker.resistance_types:
                    with gr.Row():
                        toggle = gr.Checkbox(
                            label=f"Enable {resist_type.title()}",
                            value=False
                        )
                        value = gr.Number(
                            label=f"Min {resist_type.title()} Value",
                            value=0,
                            minimum=0,
                            maximum=100,
                            step=1
                        )
                        resistance_inputs.extend([toggle, value])
                
                inputs.extend(resistance_inputs)
                search_btn = gr.Button("Search Armors", variant="primary")
            
            with gr.Column(scale=3):
                results_md = gr.Markdown("## Results")
                results = gr.HTML(
                    label="Matching Armors",
                    value="<p>Click 'Search Armors' to see results...</p>"
                )
        
        # Language change handler
        def update_ui_language(language):
            picker.load_armor_data(language)
            
            # Update all UI elements with new translations
            updates = []
            updates.append(gr.Markdown.update(value=f"# {picker.get_translation('title')}"))  # title
            updates.append(gr.Markdown.update(value=picker.get_translation('subtitle')))  # subtitle
            updates.append(gr.Markdown.update(value=picker.get_translation('color_legend')))  # legend
            updates.append(gr.Markdown.update(value=f"## {picker.get_translation('resistance_filters')}"))  # filters
            updates.append(gr.Markdown.update(value=f"## {picker.get_translation('results')}"))  # results
            updates.append(gr.Button.update(value=picker.get_translation('search_button')))  # search button
            updates.append(gr.HTML.update(value=f"<p>{picker.get_translation('click_search')}</p>"))  # results
            
            # Update resistance filter labels
            resistance_updates = []
            for i, resist_type in enumerate(picker.resistance_types):
                resistance_updates.append(gr.Checkbox.update(label=f"{picker.get_translation('enable')} {picker.get_translation(resist_type).title()}"))
                resistance_updates.append(gr.Number.update(label=picker.get_translation('min_value').format(picker.get_translation(resist_type).title())))
            
            updates.extend(resistance_updates)
            return updates
        
        # Set up event handlers
        language_selector.change(
            fn=update_ui_language,
            inputs=[language_selector],
            outputs=[title_md, subtitle_md, legend_md, filters_md, results_md, search_btn, results] + resistance_inputs
        )
        
        search_btn.click(
            fn=search_armors,
            inputs=inputs,
            outputs=[results]
        )
    
    return interface

# Launch the application
if __name__ == "__main__":
    app = create_armor_picker_interface()
    app.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )

